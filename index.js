const BOT_TOKEN = process.env.BOT_TOKEN || "5745883031:AAFu7D_YO08TIJlhLkWGwfBEHB_lCNji0b0";
const PROVIDER_TOKEN = process.env.PROVIDER_TOKEN||"381764678:TEST:56879";
const Telegraf = require('telegraf');
const session = require('telegraf/session');// –ø–∞–∫–µ—Ç —Å–µ—Å—Å–∏–π, –Ω–µ–æ—é—Ö–æ–¥–∏–º –¥–ª—è —Å—Ü–µ–Ω
const Stage = require('telegraf/stage');// –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
const WizardScene = require('telegraf/scenes/wizard');// –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—à–∞–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω
const axios = require("axios");// –¥–ª—è –ê–ü–ò –∑–∞–ø—Ä–æ—Å–æ–≤
const bot_username = "sokol_telegraf_test_bot";
const valute = "—Ä—É–±–ª–µ–π";
const root_api_address = "http://88.151.117.211:3500";

const bmiValue = require('./bmiValue');
const bot = new Telegraf(BOT_TOKEN);

function isNumber(value){
   return typeof value === 'number' && isFinite(value);
}

const getInvoice = (id,title_param='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',description_param="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",prices_param=[{ label: 'Invoice Title', amount: 100 * 100 }]) => {
    const invoice = {
      chat_id: id, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      title: title_param, // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, 1-32 —Å–∏–º–≤–æ–ª–∞
      description: description_param, // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, 1-255 –∑–Ω–∞–∫–æ–≤
      payload: { // –ü–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º, 1‚Äì128 –±–∞–π—Ç. –≠—Ç–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Å–≤–æ–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
        unique_id: `${id}_${Number(new Date())}`,
        provider_token: PROVIDER_TOKEN 
      },
      provider_token: PROVIDER_TOKEN, // —Ç–æ–∫–µ–Ω –≤—ã–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –±–æ—Ç @SberbankPaymentBot       
      currency: 'RUB', // –¢—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã ISO 4217
      start_parameter: 'get_access', //–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–ª—É–±–∏–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –ø–æ–∑–≤–æ–ª—è—é—â—É—é –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—á–µ—Ç. –ï—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫—É URL —Å –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ (–≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã) —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
      prices: prices_param, // –†–∞–∑–±–∏–≤–∫–∞ —Ü–µ–Ω, —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON 100 –∫–æ–ø–µ–µ–∫ * 100 = 100 —Ä—É–±–ª–µ–π
      need_email:true,
      send_email_to_provider:true
    };
    return invoice
  }

const welcomeScene = new WizardScene('welcome',
    async(ctx)=>{
        const user_id = ctx.message.chat.id;
        try{
            const currencyObj = await axios.get(`${root_api_address}/api/users/${user_id}`);
            if(currencyObj.data.values.rows.length>0){
                ctx.scene.leave();
                ctx.scene.enter("menu");
            }else{
                ctx.wizard.next();
                return ctx.wizard.steps[ctx.wizard.cursor](ctx);
            }
        }catch(err){
            ctx.wizard.next();
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }
    },
    async(ctx)=>{
        axios.post(`${root_api_address}/api/users`, {
            telegram_id: ctx.message.chat.id,
            telegram_name:ctx.message.chat.first_name,
            telegram_lastname:ctx.message.chat.last_name,
            telegram_nickname:ctx.message.chat.username
        })
        .then(function (response) {
            console.log(response);
        })
        .catch(function (error) {
            console.log(error);
        });
        ctx.wizard.next();
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    (ctx)=>{
        ctx.reply('–ú—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤!');
        setTimeout(function(){
            ctx.reply('–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ:\n\nüõí –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\nüöö —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\nüí¥ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã üõí" –∏ —Å–∫–æ—Ä–µ–µ –Ω–∞—á–∏–Ω–∞–π –ø–æ–∫—É–ø–∫–∏!');
            ctx.wizard.next();
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        },1000)
    },
    (ctx)=>{
        setTimeout(function(){
            ctx.scene.leave();
            ctx.scene.enter("menu");
        },1000)
    }
);
const menuAndWebAppScene = new WizardScene('menu',
    (ctx)=>{
        ctx.reply(`–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É ‚¨áÔ∏è`,{
            reply_markup: {
                resize_keyboard:true,
                one_time_keyboard:true,
                remove_keyboard: true,
                hide_keyboard: true,
                keyboard: [
                    [ { text: "–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã üõí",web_app:{url:"https://botsband.online/botShop/"}}],
                    [ { text: "–ú–æ–∏ –±–æ–Ω—É—Å—ã üíµ"},{ text: "–í–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É üí¨"}]
                ]
            }
        });
        ctx.wizard.next();
    },
    (ctx)=>{
        if("web_app_data" in ctx.message){
            if(ctx.message.web_app_data.button_text=="–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã üõí"){
                ctx.wizard.state.web_app_data = ctx.message.web_app_data.data;
                ctx.wizard.next();
            }
        }else if(ctx.message.text=="–ú–æ–∏ –±–æ–Ω—É—Å—ã üíµ"){
            ctx.scene.leave();
            return ctx.scene.enter("bonuces");
        }else if(ctx.message.text=="–í–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É üí¨"){
            ctx.scene.leave();
            return ctx.scene.enter("question");
        }
        else{
            ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫');
            ctx.wizard.back();
        }
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    (ctx)=>{
        const user_id = ctx.message.chat.id;
        axios.post(`${root_api_address}/api/users/phone/check`, {
            telegram_id: user_id
        })
        .then(function (response) {
            if(response.data.values.phone_existence===true){
                let phone_from_row = response.data.values.rows[0].phone;
                ctx.wizard.state.phone = phone_from_row;
                ctx.wizard.next();
                return ctx.wizard.steps[ctx.wizard.cursor](ctx);
            }else{
                ctx.reply(`–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É ‚¨áÔ∏è`,{
                    reply_markup: {
                        one_time_keyboard:true,
                        remove_keyboard: true,
                        hide_keyboard: true,
                        keyboard: [
                            [ { text: "–ü–µ—Ä–µ–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚úÖ",request_contact:true}]
                        ]
                    }
                });
            }
        })
        .catch(function (error) {
            console.log(error);
            ctx.reply(`–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É ‚¨áÔ∏è`,{
                reply_markup: {
                    keyboard: [
                        [ { text: "–ü–µ—Ä–µ–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚úÖ",request_contact:true}]
                    ]
                }
            });
        });
        ctx.wizard.next();
    },
    (ctx)=>{
        if("contact" in ctx.message){
            const user_id = ctx.message.chat.id;
            ctx.wizard.state.phone = ctx.message.contact.phone_number;
            ctx.wizard.next();
            axios.post(`${root_api_address}/api/users/phone/set`, {
                telegram_id: user_id,
                phone:ctx.wizard.state.phone
            })
        }else if(ctx.wizard.state.phone){
            ctx.wizard.next();
        }else{
            ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫');
            ctx.wizard.back();
        }
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    async(ctx)=>{
        try{
            const user_id = ctx.message.chat.id;
            const currencyObj = await axios.get(`${root_api_address}/api/users/${user_id}/orders`);
            let orders = currencyObj.data.values;
            let address_keyboard = [];
            orders.forEach(order => {
                let check = address_keyboard.find(find_address => find_address[0].text == order.delivery_address);
                if(!check) address_keyboard.push([{text:order.delivery_address}]);// –∏—Å–∫–ª—é—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            })
            ctx.reply(`–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ ‚¨áÔ∏è`,{
                reply_markup: {
                    remove_keyboard: true,
                    keyboard: address_keyboard
                }
            });
        }catch(err){
            console.log(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
            ctx.reply(`–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ ‚¨áÔ∏è`,{
                reply_markup: {
                    remove_keyboard: true
                }
            });
        }
        ctx.wizard.next();
    },
    (ctx)=>{
        if("text" in ctx.message){
            ctx.wizard.state.address = ctx.message.text;
            ctx.wizard.next();
        }else{
            ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º');
            ctx.wizard.back();
        }
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    async(ctx)=>{
        const user_id = ctx.message.chat.id;
        try{
            const currencyObj = await axios.get(`${root_api_address}/api/users/${user_id}`);
            let bonuces_amount = currencyObj.data.values.rows[0].bonuces_amount;
            if(bonuces_amount>0){
                ctx.wizard.state.bonuces_available = bonuces_amount;
                ctx.reply(`–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É ${bonuces_amount} –±–æ–Ω—É—Å–Ω—ã—Ö ${valute}. –í–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ø–∏—Å–∞—Ç—å ‚úçÔ∏è`,{
                    reply_markup: {
                        keyboard: [
                            [ { text: "–°–ø–∏—Å–∞—Ç—å –≤—Å–µ –±–æ–Ω—É—Å—ã"}],
                            [ { text: "–ù–µ —Å–ø–∏—Å—ã–≤–∞—Ç—å"}]
                        ]
                    }
                });
                ctx.wizard.next();
            }else{
                ctx.wizard.state.bonuces_used = 0;
                ctx.wizard.next();
                return ctx.wizard.steps[ctx.wizard.cursor](ctx);
            }
        }catch(err){
            ctx.wizard.state.bonuces_used = 0;
            ctx.wizard.next();
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }
    },
    (ctx)=>{
        if(ctx.wizard.state.bonuces_used == 0){
            ctx.wizard.next();
        }else if(ctx.message.text=="–°–ø–∏—Å–∞—Ç—å –≤—Å–µ –±–æ–Ω—É—Å—ã"){
            ctx.wizard.state.bonuces_used = ctx.wizard.state.bonuces_available;
            ctx.wizard.next();
        }else if(ctx.message.text=="–ù–µ —Å–ø–∏—Å—ã–≤–∞—Ç—å"){
            ctx.wizard.state.bonuces_used = 0;
            ctx.wizard.next();
        }else if(isNumber(Number(ctx.message.text))&&Number(ctx.message.text)>=0){
            if(ctx.message.text<=ctx.wizard.state.bonuces_available){
                ctx.wizard.state.bonuces_used = ctx.message.text;
                ctx.wizard.next();
            }else{
                ctx.reply(`–ú–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ ${ctx.wizard.state.bonuces_available} –±–æ–Ω—É—Å–æ–≤.`,{reply_markup: {remove_keyboard: true}});
                ctx.wizard.back();
            }
        }else{
            ctx.reply(`–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è`,{reply_markup: {remove_keyboard: true}});
            ctx.wizard.back();
        }
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    (ctx)=>{
        const bucket_from_webApp = JSON.parse(ctx.wizard.state.web_app_data);
        let prices_list_text = "";
        let result_sum_without_discount = 0;
        let result_sum = 0;
        let result_discount = 0;
        bucket_from_webApp.forEach(element => {
            result_sum_without_discount = result_sum_without_discount + (element.price * element.productCount);
            result_sum = result_sum + ((element.price - element.discount) * element.productCount);
            result_discount = (result_discount + element.discount) * element.productCount;
            prices_list_text = `${prices_list_text}\n<u>${element.name}</u> \n${(element.discount>0)?(element.price - element.discount):element.price} x ${element.productCount} = ${(element.price - element.discount)*element.productCount} ${valute} ${(element.discount>0)?"(–°–∫–∏–¥–∫–∞ "+(element.discount*element.productCount)+" "+valute+")":""}\n`;
        });
        prices_list_text = prices_list_text + ((result_discount>0)?`\n<b>–ò—Ç–æ–≥–æ:</b> ${result_sum_without_discount} ${valute}\n<b>–°–∫–∏–¥–∫–∞:</b> ${result_discount} ${valute}`:``);
        if(ctx.wizard.state.bonuces_used>0){
            if(ctx.wizard.state.bonuces_used>result_sum){
                ctx.wizard.state.bonuces_used=result_sum;
            }
            prices_list_text = prices_list_text + `\n<b>–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> ${ctx.wizard.state.bonuces_used}`;
            result_sum = result_sum - ctx.wizard.state.bonuces_used;
        }
        prices_list_text = prices_list_text + `\n<b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${result_sum} ${valute}`;
        prices_list_text = `${prices_list_text}\n\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${ctx.wizard.state.phone}\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${ctx.wizard.state.address}`;
        ctx.wizard.state.prices_list_text = prices_list_text;
        ctx.replyWithHTML("<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n"+prices_list_text,{
            reply_markup: {
                one_time_keyboard:true,
                keyboard: [
                    [ { text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ ‚úÖ"}]
                ]
            }
        });
        ctx.wizard.next();
    },
    (ctx)=>{
        if(ctx.message.text=="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ ‚úÖ"){
            ctx.wizard.next();
        }
        else{
            ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫');
            ctx.wizard.back();
        }
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    (ctx)=>{
        ctx.replyWithHTML('<b>–î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã</b>\n\n–ö–∞—Ä—Ç–∞: <code>1111111111111026</code>\n\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <code>12/22</code>\n\nCVC: <code>000</code>',{
            reply_markup: {
                remove_keyboard: true
            }
        });
        let prices_list = [];
        let bucket_from_webApp = JSON.parse(ctx.wizard.state.web_app_data);
        bucket_from_webApp.forEach(element => {
            const result_price = (element.discount>0)?element.price-element.discount:element.price;
            prices_list.push({label:element.name,amount:result_price * element.productCount * 100})
        });
        if(ctx.wizard.state.bonuces_used>0){
            prices_list.push({label:"–°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤",amount: ctx.wizard.state.bonuces_used * -100})
        }
        setTimeout(function(){
            ctx.replyWithInvoice(getInvoice(ctx.from.id,"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞","–ü–æ–∫—É–ø–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",prices_list),{
                reply_markup: {
                    inline_keyboard: [
                        [ { text: "–û–ø–ª–∞—Ç–∏—Ç—å ",pay:true}],
                        [ { text: "–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É",callback_data:"back"}]
                    ]
                }
            });
            ctx.wizard.next();
        },1000)
    },
    (ctx)=>{
        if("callback_query" in ctx.update){
            if(ctx.update.callback_query.data === "back"){
                ctx.wizard.selectStep(0);
            }
        }else if("successful_payment" in ctx.message){
            ctx.wizard.next();
        }else{
            ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã');
            ctx.wizard.back();
        }
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    (ctx)=>{
        axios.post(`${root_api_address}/api/orders`, {
            telegram_id: ctx.message.chat.id,
            bonuces_used:ctx.wizard.state.bonuces_used,
            delivery_address:ctx.wizard.state.address,
            products:JSON.parse(ctx.wizard.state.web_app_data)
        })
        .then(function (response) {
            let order_id = response.data.values.id;
            let order_bonuses_accrued = response.data.values.bonuses_accrued;
            ctx.reply(`–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order_id} –æ–ø–ª–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${order_bonuses_accrued} –±–æ–Ω—É—Å–æ–≤.`,{reply_markup: {remove_keyboard: true}});
        })
        .catch(function (error) {
            ctx.reply(`Error`,{reply_markup: {remove_keyboard: true}});
            console.log(error);
        });
        axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            text: `‚¨áÔ∏è <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b> ‚¨áÔ∏è\n\n${ctx.wizard.state.prices_list_text}\n${(ctx.message.chat.username)?"@"+ctx.message.chat.username:""}`,
            chat_id: -1001886258703,
            parse_mode:"HTML"
        })
        .then(function (response) {

        })
        .catch(function (error) {
            console.log(error);
        });
        setTimeout(function(){
            ctx.scene.leave();
            ctx.scene.enter("menu");
        }, 1500);
    }
)
const bonucesScene = new WizardScene('bonuces',
    async(ctx)=>{
        const user_id = ctx.message.chat.id;
        try{
            const currencyObj = await axios.get(`${root_api_address}/api/users/${user_id}`);
            let bonuces_amount = currencyObj.data.values.rows[0].bonuces_amount;
            ctx.reply(`–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É ${bonuces_amount} –±–æ–Ω—É—Å–Ω—ã—Ö ${valute}`);
            ctx.wizard.next();
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }catch(err){
            console.log(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
            ctx.wizard.next();
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }
    },
    (ctx)=>{
        setTimeout(function(){
            ctx.scene.leave();
            ctx.scene.enter("menu");
        },1000)
        
    }
);

const questionScene = new WizardScene('question',
    (ctx)=>{
        ctx.reply(`–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚¨áÔ∏è`,);
        ctx.wizard.next();
    },
    (ctx)=>{
        if("text" in ctx.message){
            ctx.wizard.state.question = ctx.message.text;
            ctx.wizard.next();
        }else{
            ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º');
            ctx.wizard.back();
        }
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    (ctx)=>{
        const user_id = ctx.message.chat.id;
        axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            text: ctx.wizard.state.question,
            chat_id: -1001886258703,
            reply_markup:{
                inline_keyboard: [
                  [
                    {
                      "text": "–î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
                      "url": `http://t.me/${bot_username}?user_id=${user_id}`
                    }
                  ]
                ]
            }
        })
        .then(function (response) {
            ctx.reply(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!`);
        })
        .catch(function (error) {
            console.log(error);
        });
        ctx.wizard.next();
        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    },
    (ctx)=>{
        ctx.scene.leave();
        ctx.scene.enter("menu");
    }
);

const stage = new Stage();
stage.register(welcomeScene);
stage.register(menuAndWebAppScene);
stage.register(bonucesScene);
stage.register(questionScene);
bot.use(session());
bot.use(stage.middleware());


bot.start((ctx)=>{
    ctx.scene.enter("welcome");
})

bot.on("message",async(ctx)=>{
    const chat_id = ctx.message.chat.id; 
    if(chat_id==-1001886258703){
        let url_in_button = ctx.message.reply_to_message.reply_markup.inline_keyboard[0][0].url;
        let user_id_index=Number(url_in_button.indexOf('?user_id='))+9;
        let chat_to_send=url_in_button.slice(user_id_index);
        console.log(chat_to_send);
        let answer = `–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: "${ctx.message.text}"\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start`;
        axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            text: answer,
            chat_id: chat_to_send
        })
    }
})

bot.on('pre_checkout_query', (ctx) => ctx.answerPreCheckoutQuery(true)) // –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ

bot.launch().then(res=>console.log('Started')).catch(err=>console.log(err));